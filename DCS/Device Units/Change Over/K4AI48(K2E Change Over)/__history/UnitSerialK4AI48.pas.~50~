unit UnitSerialK4AI48;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, System.SyncObjs,
  UnitBaseSerial;

const
  // Nak Received, Error Bit
  K4AI48_NAK_UNDEFINED = $01;
  K4AI48_NAK_SYNTAX    = $02;
  K4AI48_NAK_CHECKSUM  = $04;
  K4AI48_NAK_PARITY    = $10;
  K4AI48_NAK_OVERRUN   = $20;
  K4AI48_NAK_FRAMING   = $40;
  K4AI48_NAK_TIMEOUT   = $80;

  K4AI48_ERROR_SYNTAX   = $02;
  K4AI48_ERROR_CHECKSUM = $04;
  K4AI48_ERROR_NAK      = $08;

  // K4AI48 Packet data
  PACKET_DEST = $00;
  PACKET_SRC  = $00;
  PACKET_TYPE = $44;

  // K4AI48 Command data
  CMD_CAT_SEND = $16;
  CMD_CAT_RECV = $17;

  // K4AI48 Command
  ACO_RESPONSE_ACK = $00;
  ACO_RESPONSE_NAK = $01;
  ACO_GET_SYSTEM_STATUS = $30;
  ACO_GET_STATUS = $31;
  ACO_SET_PORT = $40;
//  ACO_SET_PHASE = $41;
  ACO_SET_MANUALMODE = $42;

type
  TStatusMode = (
    smAuto,
    smManual
    );

  TPortState = (
    psNormal = 0,
    psNoCarrier = 1,
    psCrcError = 2,
    psSilence = 3,
    psClip = 4
    );

  TPortStatus = record
    In1: TPortState;
    In2: TPortState;
    In3: TPortState;
    In4: TPortState;
    Out1: Byte;
    Out2: Byte;
    StatusMode: TStatusMode;
  end;

  TOnConnectChanged = procedure(Sender: TComponent; AConnected: Boolean) of object;
  TOnStatusChanged = procedure(Sender: TComponent; APortStatus: TPortStatus) of object;

  TStatusThread = class;

  TSerialK4AI48 = class(TBaseSerial)
  private
    { Private declarations }
    FStatusThread: TStatusThread;

    FCaption: String;
    FDeviceID: Word;
    FCriticalSection: TCriticalSection;

    FPortStatus: TPortStatus;
    FConnected: Boolean;
    FAutoStatus: Boolean;
    FAutoStatusInterval: Integer;

    FOnConnectChanged: TOnConnectChanged;
    FOnStatusChanged: TOnStatusChanged;

    procedure SetCaption(AValue: String);
    procedure SetDeviceID(AValue: Word);
    procedure SetAutoStatus(AValue: Boolean);
    procedure SetAutoStatusInterval(AValue: Integer);

    function SendCommand(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;
  protected
    { Protected declarations }
    procedure DataEvent; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function CheckSum(AValue: AnsiString): Boolean;
    function TransmitStatus(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;
    function TransmitCommand(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;

    function GetSystemStatus(var AModel: String; varARemote: Word): Integer;     // 0X30
    function GetPortStatus(var APortStatus: TPortStatus): Integer;            // 0X31
    function SetPort(AOutPort, AInPort: Byte): Integer;                       // 0X40
    function SetManualMode(AStatusMode: TStatusMode): Integer;                // 0X42

    property PortStatus: TPortStatus read FPortStatus;
  published
    { Published declarations }
    property Caption: String read FCaption write SetCaption;
    property DeviceID: Word read FDeviceID write SetDeviceID;

    property AutoStatus: Boolean read FAutoStatus write SetAutoStatus;
    property AutoStatusInterval: Integer read FAutoStatusInterval write SetAutoStatusInterval;

    property OnConnectChanged: TOnConnectChanged read FOnConnectChanged write FOnConnectChanged;
    property OnStatusChanged: TOnStatusChanged read FOnStatusChanged write FOnStatusChanged;
  end;

  TStatusThread = class(TThread)
  private
    FK4AI48: TSerialK4AI48;
    FExecuteEvent: THandle;
    FCompleteEvent: THandle;
    FSaveConnected: Boolean;
    FSavePortStatus: TPortStatus;

    procedure DoStatus;
    procedure DoControl;
  protected
    procedure Execute; override;
  public
    constructor Create(AK4AI48: TSerialK4AI48);
    destructor Destroy; override;
  end;

implementation

{ TSerialK4AI48 }

constructor TSerialK4AI48.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FCriticalSection := TCriticalSection.Create;
  FLastResult := D_OK;

  FComPortBaudRate := br115200;
  FComPortParity := ptNone;
  FComPortStopBits := sb1Bits;

  FConnected  := False;
  FAutoStatus := False;
  FAutoStatusInterval := 30;
end;

destructor TSerialK4AI48.Destroy;
begin
  if Assigned(FStatusThread) then
  begin
    FStatusThread.Terminate;
    FStatusThread.WaitFor;
    FreeAndNil(FStatusThread);
  end;

  if FCriticalSection <> nil then
  begin
    FCriticalSection.Free;
    FCriticalSection := nil;
  end;

  inherited Destroy;
end;

{procedure TSerialK4AI48.SetPortNumber(AValue: Integer);
begin
  if not (Abs(AValue) in [0..127]) then
  begin
    MessageDlg('Device ID must between 0 and 127 or between -127 and -1', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FPortNumber then FPortNumber := AValue;
end; }

procedure TSerialK4AI48.SetCaption(AValue: String);
begin
  if AValue <> FCaption then FCaption := AValue;
end;

procedure TSerialK4AI48.SetDeviceID(AValue: Word);
begin
  if not (AValue in [0..255]) then
  begin
    MessageDlg('Device ID must between 0 and 255', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FDeviceID then FDeviceID := AValue;
end;

procedure TSerialK4AI48.SetAutoStatus(AValue: Boolean);
begin
  if FAutoStatus <> AValue then
  begin
    FAutoStatus := AValue;
    if FAutoStatus then
    begin
      FStatusThread := TStatusThread.Create(Self);
      FStatusThread.Resume;
    end
    else if Assigned(FStatusThread) then
    begin
      FStatusThread.Terminate;
      FStatusThread.WaitFor;
      FreeAndNil(FStatusThread);
    end;
  end;
end;

procedure TSerialK4AI48.SetAutoStatusInterval(AValue: Integer);
begin
  if (FAutoStatusInterval <> AValue) then
    FAutoStatusInterval := AValue;
end;

function TSerialK4AI48.CheckSum(AValue: AnsiString): Boolean;
var
  I, Len: Integer;
  CRC: Byte;
begin
  Result := False;

  Len := Length(AValue);
  CRC := 0;
  for I := 1 to Len - 1 do
    CRC := CRC xor Ord(AValue[I]);
  CRC := not (CRC) + 1;

  Result := (CRC = Ord(AValue[Len]));
end;

function TSerialK4AI48.SendCommand(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
//  Buffer: PByte;
  Buffer: AnsiString;
  ByteCountStr: AnsiString;
  CheckSum: Byte;
  I: integer;
  ErrCnt: Integer;
begin
  Result := D_FALSE;

  Buffer := AnsiChar($FF) + AnsiChar(PACKET_DEST) + AnsiChar(PACKET_SRC) + AnsiChar(ADataSize + 4) +
            AnsiChar(PACKET_TYPE) + AnsiChar(CMD_CAT_SEND) + AnsiChar(ACMD);

  for I := 1 to ADataSize do
  begin
    if (Ord(ADataBuf[I]) = $FE) then
      Buffer := Buffer + AnsiChar($FE) + AnsiChar($01)
    else if (Ord(ADataBuf[I]) = $FF) then
      Buffer := Buffer + AnsiChar($FE) + AnsiChar($00)
    else
      Buffer := Buffer + ADataBuf[I];
  end;

  CheckSum := PACKET_DEST + PACKET_SRC + (ADataSize + 4) + PACKET_TYPE + CMD_CAT_SEND + ACMD;
  for I := 1 to ADataSize do
    CheckSum := CheckSum + Ord(ADataBuf[I]);

  CheckSum := 0 - CheckSum;
  Buffer := Buffer + AnsiChar(CheckSum);

  ErrCnt := 0;
  while ErrCnt < MAX_RETRY do
  begin
    if SendData(Pointer(Buffer), ADataSize + 7) = D_FALSE then
    begin
      Inc(ErrCnt);
      Continue;
    end
    else
    begin
      Result := D_OK;
      break;
    end;
  end;
end;

function TSerialK4AI48.TransmitStatus(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  FReceivedBuffer := '';
  FReceivedData := '';

  FCriticalSection.Enter;
  try
    if SendCommand(ACMD, ADataBuf, ADataSize) = D_OK then
    begin
      ResetEvent(FSyncMsgEvent);
      R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
      case R of
        WAIT_OBJECT_0:
          begin
            Result := FLastResult;
          end;
        else Result := E_TIMEOUT;
       end;
    end;
  finally
    FCriticalSection.Leave;
  end;
end;

function TSerialK4AI48.TransmitCommand(ACMD: Byte; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  if Assigned(FStatusThread) then ResetEvent(FStatusThread.FExecuteEvent);
  try
    if Assigned(FStatusThread) then R := WaitForSingleObject(FStatusThread.FCompleteEvent, INFINITE);

    FReceivedBuffer := '';
    FReceivedData := '';

    FCriticalSection.Enter;
    try
      if SendCommand(ACMD, ADataBuf, ADataSize) = D_OK then
      begin
        ResetEvent(FSyncMsgEvent);
        R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
        case R of
          WAIT_OBJECT_0:
            begin
              Result := FLastResult;
            end;
          else Result := E_TIMEOUT;
         end;
      end;
    finally
      FCriticalSection.Leave;
    end;
  finally
    if Assigned(FStatusThread) then SetEvent(FStatusThread.FExecuteEvent);
  end;
end;

procedure TSerialK4AI48.DataEvent;
var
  ByteCount: Integer;
begin
  inherited;
  if (Length(FReceivedBuffer) < 1) then exit;
  case Ord(FReceivedBuffer[1]) of
    $FF:
    begin
      if (Length(FReceivedBuffer) < 4) then exit;
      ByteCount := Ord(FReceivedBuffer[4]);
      if (Length(FReceivedBuffer) = ByteCount + 4) then
      begin
        if CheckSum(FReceivedBuffer) then
        begin
          FReceivedData := System.Copy(FReceivedBuffer, 5, ByteCount - 1);
          if (Ord(FReceivedData[2]) = CMD_CAT_RECV) then
          begin
            if (Ord(FReceivedData[4]) = ACO_RESPONSE_ACK) then
            begin
              FLastResult := D_OK
            end
            else
              FLastResult := K4AI48_ERROR_NAK;
          end
          else
            FLastResult := K4AI48_ERROR_SYNTAX;
        end
        else
          FLastResult := K4AI48_ERROR_CHECKSUM;

        SetEvent(FSyncMsgEvent);
        FReceivedBuffer := '';
      end
      else if (ByteCount <= 0) or (Length(FReceivedBuffer) > ByteCount + 4) then
      begin
        FLastResult := D_FALSE;
        SetEvent(FSyncMsgEvent);
        FReceivedBuffer := '';
      end;
    end;
    else
    begin
      FLastResult := D_FALSE;
      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
  end;
end;

function TSerialK4AI48.GetSystemStatus(var AModel: String; var ARemote: Word): Integer;
var
  Buffer: AnsiString;
begin
  Result := D_FALSE;

  AModel  := '';
  ARemote := 0;

  Buffer := '';
  Result := TransmitCommand(ACO_GET_SYSTEM_STATUS, Buffer, Length(Buffer));

  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) < 22) then exit;

    AModel  := Copy(FReceivedData, 5, 16);
    ARemote := PAnsiCharToWord(@FReceivedData[21]);
  end;
end;

function TSerialK4AI48.GetPortStatus(var APortStatus: TPortStatus): Integer;
var
  Buffer: AnsiString;
begin
  Result := D_FALSE;
  ZeroMemory(@APortStatus, SizeOf(TPortStatus));

  Buffer := AnsiChar($00);
  Result := TransmitCommand(ACO_GET_STATUS, Buffer, Length(Buffer));

  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) < 12) then exit;
    APortStatus.In1        := TPortState(Ord(FReceivedData[5]));
    APortStatus.In2        := TPortState(Ord(FReceivedData[6]));
    APortStatus.In3        := TPortState(Ord(FReceivedData[7]));
    APortStatus.In4        := TPortState(Ord(FReceivedData[8]));
    APortStatus.Out1       := Ord(FReceivedData[9]);
    APortStatus.Out2       := Ord(FReceivedData[10]);

    if ((PAnsiCharToWord(@FReceivedData[11]) and $FFFF) = $00) then
      APortStatus.StatusMode := smAuto
    else
      APortStatus.StatusMode := smManual;
  end;
end;

function TSerialK4AI48.SetPort(AOutPort, AInPort: Byte): Integer;
var
  Buffer: AnsiString;
begin
  Buffer := AnsiChar($00) + AnsiChar(AOutPort) + AnsiChar(AInPort);
  Result := TransmitCommand(ACO_SET_PORT, Buffer, Length(Buffer));
end;

function TSerialK4AI48.SetManualMode(AStatusMode: TStatusMode): Integer;
var
  Buffer: AnsiString;
begin
  Buffer := AnsiChar($00);

  if (AStatusMode = smAuto) then
    Buffer := Buffer + AnsiChar($00)
  else
    Buffer := Buffer + AnsiChar($01);

  Result := TransmitCommand(ACO_SET_MANUALMODE, Buffer, Length(Buffer));
end;

{ TStatusThread }

constructor TStatusThread.Create(AK4AI48: TSerialK4AI48);
begin
  FK4AI48 := AK4AI48;

  FreeOnTerminate := False;
  inherited Create(True);
end;

destructor TStatusThread.Destroy;
begin
  inherited Destroy;
end;

procedure TStatusThread.DoStatus;
var
  R: Integer;

  function GetStatus(var APortStatus: TPortStatus): Integer;
  var
    Buffer: AnsiString;
  begin
    Result := D_FALSE;
    ZeroMemory(@APortStatus, SizeOf(TPortStatus));

    with FK4AI48 do
    begin
      Buffer := AnsiChar($00);
      Result := TransmitStatus(ACO_GET_STATUS, Buffer, Length(Buffer));

      if (Result = D_OK) then
      begin
        if (Length(FReceivedData) < 12) then exit;
        APortStatus.In1        := TPortState(Ord(FReceivedData[5]));
        APortStatus.In2        := TPortState(Ord(FReceivedData[6]));
        APortStatus.In3        := TPortState(Ord(FReceivedData[7]));
        APortStatus.In4        := TPortState(Ord(FReceivedData[8]));
        APortStatus.Out1       := Ord(FReceivedData[9]);
        APortStatus.Out2       := Ord(FReceivedData[10]);

        if ((PAnsiCharToWord(@FReceivedData[11]) and $FFFF) = $00) then
          APortStatus.StatusMode := smAuto
        else
          APortStatus.StatusMode := smManual;
      end;
    end;
  end;

begin
  inherited;

  with FK4AI48 do
  begin
    FSaveConnected  := FConnected;
    FSavePortStatus := FPortStatus;

    if not (Connected) or (not Assigned(FAsyncThread) and not (FAsyncThread.Suspended)) then
    begin
      FConnected := False;
      exit;
    end;

    R := GetStatus(FPortStatus);
    if R = D_OK then FConnected := True
    else FConnected := False;
  end;
end;

procedure TStatusThread.DoControl;
begin
  inherited;

  with FK4AI48 do
  begin
    if Assigned(FOnConnectChanged) then
      if FSaveConnected <> FConnected then
        FOnConnectChanged(FK4AI48, FConnected);

    if Assigned(FOnStatusChanged) then
      if ((FSaveConnected <> FConnected) and (FConnected)) or
         (FSavePortStatus.In1 <> FPortStatus.In1) or
         (FSavePortStatus.In2 <> FPortStatus.In2) or
         (FSavePortStatus.In3 <> FPortStatus.In3) or
         (FSavePortStatus.In4 <> FPortStatus.In4) or
         (FSavePortStatus.Out1 <> FPortStatus.Out1) or
         (FSavePortStatus.Out2 <> FPortStatus.Out2) or
         (FSavePortStatus.StatusMode <> FPortStatus.StatusMode) then
        FOnStatusChanged(FK4AI48, FPortStatus);
  end;
end;

procedure TStatusThread.Execute;
var
  R: Integer;
begin
  FExecuteEvent := CreateEvent(nil, True, True, nil);
  FCompleteEvent := CreateEvent(nil, True, True, nil);
  while not Terminated do
  begin
    if WaitForSingleObject(FExecuteEvent, INFINITE) = WAIT_OBJECT_0 then
    begin
      ResetEvent(FCompleteEvent);
      try
        DoStatus;
        DoControl;
//        Synchronize(DoControl);
      finally
        SetEvent(FCompleteEvent);
      end;
    end;
    Sleep(FK4AI48.FAutoStatusInterval);
  end;
  CloseHandle(FCompleteEvent);
  CloseHandle(FExecuteEvent);
end;

end.

unit UnitGrassValleyRCL;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, System.SyncObjs, Generics.Collections,
  UnitBaseSerial;

const
  GVR_RCL_SOH = $01;
  GVR_RCL_EOT = $04;

  // Nak Received, Error Bit
  GVR_RCL_NAK_BUFFER_SIZE_EXCEEDED = $71;
  GVR_RCL_NAK_BUFFER_NOT_AVAILABLE = $72;

  GVR_RCL_NAK_CHIP_LEVEL_ERROR     = $74;
  GVR_RCL_NAK_CHECKSUM_ERROR       = $75;
  GVR_RCL_NAK_TIME_OUT_ERROR       = $76;
  GVR_RCL_NAK_MISSING_SOH          = $77;
  GVR_RCL_NAK_MISSING_EOT          = $78;

  FULLQUAL_NAME_LEN = 20;

type
  TFullQualEntry = record
    case Integer of
      0: (
          AreaIndex: SmallInt;
          Index: Cardinal;
          );
      1: (
          AreaName: array [0..FULLQUAL_NAME_LEN] of Char;
          Name: array [0..FULLQUAL_NAME_LEN] of Char;
          );
  end;
  TTFullQualEntryList = TList<TFullQualEntry>;

  TOnConnectChanged = procedure(Sender: TComponent; AConnected: Boolean) of object;

  TOnRCLNotification = procedure(Sender: TComponent; ASubType: String; AParameters: String) of object;

  TStatusThread = class;

  TGrassValleyRCL = class(TBaseSerial)
  private
    { Private declarations }
    FStatusThread: TStatusThread;

    FCaption: String;
    FDeviceID: Word;
    FCriticalSection: TCriticalSection;

    FSessionID: Word;
    FMessageID: Integer;
    FSeqNumber: Integer;
    FRequestCmd: AnsiString;

    FConnected: Boolean;
    FAutoStatus: Boolean;
    FAutoStatusInterval: Integer;

    FOnConnectChanged: TOnConnectChanged;

    FOnRCLNotification: TOnRCLNotification;
    FOnRCLDisconnect: TNotifyEvent;
    FOnRCLAnnounce: TNotifyEvent;

    procedure SetCaption(AValue: String);
    procedure SetDeviceID(AValue: Word);
    procedure SetAutoStatus(AValue: Boolean);
    procedure SetAutoStatusInterval(AValue: Integer);

    function GetFullQualIndexString(AFullQualEntry: TFullQualEntry): AnsiString;
    function GetFullQualNameString(AFullQualEntry: TFullQualEntry): AnsiString;

    function SendCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
  protected
    { Protected declarations }
    procedure DataEvent; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;

    function CheckSum(AValue: AnsiString): Boolean;
    function TransmitAck: Integer;
    function TransmitNack(ANakError: Byte): Integer;
    function TransmitResponse(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
    function TransmitStatus(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;

    function TransmitCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;

    function RCLConnect(var ASessionID: Word): Integer;
    function RCLDisconnect: Integer;

    function AssignSource(ADstName: String; ASrcCnt: Word; ASrcNames: array of String): Integer;
    function TakebyLevelIndex(ADstEntry: TFullQualEntry; ASrcEntry: TFullQualEntry; ALevel: SmallInt; ATimeStamp: String = ''): Integer;
    function QueryDestinationStatusByIndex(ADstEntry: TFullQualEntry; var AProtect: Boolean; var AChopping: Boolean; var ASrcEntry: TFullQualEntry; var AChopEntry: TFullQualEntry): Integer;
    function QueryDestinationStatusLevelByIndex(ADstEntry: TFullQualEntry; ALevel: SmallInt; var AProtect: Boolean; var AChopping: Boolean; var ASrcEntry: TFullQualEntry; var AChopEntry: TFullQualEntry): Integer;
    function QueryDateTime(var ADateTime: TDateTime): Integer;

    property SessionID: Word read FSessionID;
    property MessageID: Integer read FMessageID;
    property SeqNumberID: Integer read FSeqNumber;
  published
    { Published declarations }
    property Caption: String read FCaption write SetCaption;
    property DeviceID: Word read FDeviceID write SetDeviceID;

    property AutoStatus: Boolean read FAutoStatus write SetAutoStatus;
    property AutoStatusInterval: Integer read FAutoStatusInterval write SetAutoStatusInterval;

    property OnConnectChanged: TOnConnectChanged read FOnConnectChanged write FOnConnectChanged;

    property OnRCLNotification: TOnRCLNotification read FOnRCLNotification write FOnRCLNotification;
    property OnRCLDisconnect: TNotifyEvent read FOnRCLDisconnect write FOnRCLDisconnect;
    property OnRCLAnnounce: TNotifyEvent read FOnRCLAnnounce write FOnRCLAnnounce;
  end;

  TStatusThread = class(TThread)
  private
    FGrassValleyRCL: TGrassValleyRCL;
    FExecuteEvent: THandle;
    FCompleteEvent: THandle;
    FSaveConnected: Boolean;

    procedure DoStatus;
    procedure DoControl;
  protected
    procedure Execute; override;
  public
    constructor Create(ALouth: TGrassValleyRCL);
    destructor Destroy; override;
  end;

implementation

uses System.DateUtils;

{ TGrassValleyRCL }

constructor TGrassValleyRCL.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FCriticalSection := TCriticalSection.Create;
  FLastResult := D_OK;
//  if SyncMode then OnDataEvent := DataEvent;

  FSessionID := 0;
  FMessageID := 0;
  FSeqNumber := 0;
  FRequestCmd := '';

  FConnected  := False;
  FAutoStatus := False;
  FAutoStatusInterval := 30;
end;

destructor TGrassValleyRCL.Destroy;
begin
  if Assigned(FStatusThread) then
  begin
    FStatusThread.Terminate;
    FStatusThread.WaitFor;
    FreeAndNil(FStatusThread);
  end;

  if FCriticalSection <> nil then
  begin
    FCriticalSection.Free;
    FCriticalSection := nil;
  end;

  inherited Destroy;
end;

{procedure TGrassValleyRCL.SetPortNumber(AValue: Integer);
begin
  if not (Abs(AValue) in [0..127]) then
  begin
    MessageDlg('Device ID must between 0 and 127 or between -127 and -1', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FPortNumber then FPortNumber := AValue;
end; }

procedure TGrassValleyRCL.SetCaption(AValue: String);
begin
  if AValue <> FCaption then FCaption := AValue;
end;

procedure TGrassValleyRCL.SetDeviceID(AValue: Word);
begin
  if not (AValue in [0..255]) then
  begin
    MessageDlg('Device ID must between 0 and 255', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FDeviceID then FDeviceID := AValue;
end;

procedure TGrassValleyRCL.SetAutoStatus(AValue: Boolean);
begin
  if FAutoStatus <> AValue then
  begin
    FAutoStatus := AValue;
    if FAutoStatus then
    begin
      FStatusThread := TStatusThread.Create(Self);
      FStatusThread.Resume;
    end
    else if Assigned(FStatusThread) then
    begin
      FStatusThread.Terminate;
      FStatusThread.WaitFor;
      FreeAndNil(FStatusThread);
    end;
  end;
end;

function TGrassValleyRCL.GetFullQualIndexString(AFullQualEntry: TFullQualEntry): AnsiString;
begin
  if (AFullQualEntry.AreaIndex >= 0) then
    Result := Format('%.2x:%.4x', [AFullQualEntry.AreaIndex, AFullQualEntry.Index])
  else
    Result := Format('%.4x', [AFullQualEntry.Index]);
end;

function TGrassValleyRCL.GetFullQualNameString(AFullQualEntry: TFullQualEntry): AnsiString;
begin
  if (Length(String(AFullQualEntry.AreaName)) >= 0) then
    Result := Format('%s:%s', [AFullQualEntry.AreaName, AFullQualEntry.Name])
  else
    Result := Format('%s', [AFullQualEntry.Name]);
end;

procedure TGrassValleyRCL.SetAutoStatusInterval(AValue: Integer);
begin
  if (FAutoStatusInterval <> AValue) then
    FAutoStatusInterval := AValue;
end;

function TGrassValleyRCL.CheckSum(AValue: AnsiString): Boolean;
var
  I, Len: Integer;
  CRC: Byte;
  CRCHexStr: AnsiString;
begin
  Result := False;

  Len := Length(AValue);
  CRC := 0;

  if (Len >= 5) then
  begin
    for I := 2 to Len - 3 do
      CRC := CRC + Ord(AValue[I]);

    CRC := (CRC mod 256);
    CRC := not (CRC) + 1;

    CRCHexStr := IntToHex(CRC, 2);

    Result := (AValue[Len - 2] = CRCHexStr[1]) and (AValue[Len - 1] = CRCHexStr[2]);
  end;
end;

function TGrassValleyRCL.SendCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  Buffer: PByte;
  SessionIDStr: AnsiString;
  MessageIDStr: AnsiString;
  SeqNumberStr: AnsiString;

  CheckSum: Byte;
  CheckSumStr: AnsiString;
  I: integer;
  ErrCnt: Integer;
begin
  Result := D_FALSE;

  Inc(FMessageID);
//  Inc(FSeqNumber);

  Buffer := GetMemory(ADataSize + 21);
  try
    Buffer[0] := GVR_RCL_SOH;
    Buffer[1] := Ord('R');

    SessionIDStr := Format('%.2x', [FSessionID]);
    Buffer[2] := Ord(SessionIDStr[1]);
    Buffer[3] := Ord(SessionIDStr[2]);

    MessageIDStr := Format('%.4x', [FMessageID]);
    Buffer[4] := Ord(MessageIDStr[1]);
    Buffer[5] := Ord(MessageIDStr[2]);
    Buffer[6] := Ord(MessageIDStr[3]);
    Buffer[7] := Ord(MessageIDStr[4]);

    SeqNumberStr := Format('%.4x', [FSeqNumber]);
    Buffer[8] := Ord(SeqNumberStr[1]);
    Buffer[9] := Ord(SeqNumberStr[2]);
    Buffer[10] := Ord(SeqNumberStr[3]);
    Buffer[11] := Ord(SeqNumberStr[4]);

    Buffer[12] := Ord('F');
    Buffer[13] := Ord('F');
    Buffer[14] := Ord('F');
    Buffer[15] := Ord('F');

    for I := 1 to Length(ACMD) do
      Buffer[I + 15] := Ord(ACMD[I]);

    for I := 1 to ADataSize do
      Buffer[I + 15 + Length(ACMD)] := Ord(ADataBuf[I]);

    CheckSum := 0;
    for I := 0 to Length(ACMD) + ADataSize + 15 do
      CheckSum := CheckSum + Ord(Buffer[I]);

    CheckSum := (CheckSum mod 256);
    CheckSum := 0 - CheckSum + 1;
    CheckSumStr := IntToHex(CheckSum, 2);

    Buffer[Length(ACMD) + ADataSize + 16] := Ord(CheckSumStr[1]);
    Buffer[Length(ACMD) + ADataSize + 17] := Ord(CheckSumStr[2]);

    Buffer[Length(ACMD) + ADataSize + 18] := GVR_RCL_EOT;

    ErrCnt := 0;
    while ErrCnt < MAX_RETRY do
    begin
      if SendData(Pointer(Buffer), ADataSize + 21) = D_FALSE then
      begin
        Inc(ErrCnt);
        Continue;
      end
      else
      begin
        Result := D_OK;
        break;
      end;
    end;
  finally
    FreeMemory(Buffer);
  end;
end;

function TGrassValleyRCL.TransmitAck: Integer;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendString(AnsiChar($04));
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRCL.TransmitNack(ANakError: Byte): Integer;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendString(AnsiChar($05) + AnsiChar(ANakError));
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRCL.TransmitResponse(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendCommand(ACMD, ADataBuf, ADataSize);
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRCL.TransmitStatus(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  FReceivedBuffer := '';
  FReceivedData := '';

  FCriticalSection.Enter;
  try
    if SendCommand(ACMD, ADataBuf, ADataSize) = D_OK then
    begin
      ResetEvent(FSyncMsgEvent);
      R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
      case R of
        WAIT_OBJECT_0:
        begin
          Result := FLastResult;
        end;
      else
        Result := E_TIMEOUT;
      end;
    end;
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRCL.TransmitCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  if Assigned(FStatusThread) then ResetEvent(FStatusThread.FExecuteEvent);
  try
    if Assigned(FStatusThread) then R := WaitForSingleObject(FStatusThread.FCompleteEvent, INFINITE);

    FReceivedBuffer := '';
    FReceivedData := '';

    FCriticalSection.Enter;
    try
      if (SendCommand(ACMD, ADataBuf, ADataSize) = D_OK) then
      begin
        ResetEvent(FSyncMsgEvent);
        R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
        case R of
          WAIT_OBJECT_0:
          begin
            Result := FLastResult;
          end;
        else
          Result := E_TIMEOUT;
        end;
      end;
    finally
      FCriticalSection.Leave;
    end;
  finally
    if Assigned(FStatusThread) then SetEvent(FStatusThread.FExecuteEvent);
  end;
end;

procedure TGrassValleyRCL.DataEvent;
var
  ByteCount: Integer;
begin
  inherited;
  if (Length(FReceivedBuffer) < 1) then exit;

  case FReceivedBuffer[1] of
    #15: // NAK
    begin
      if (Length(FReceivedBuffer) < 2) then exit;

      FLastResult := Ord(FReceivedBuffer[2]);
      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
    #06: // ACK
    begin
      FLastResult := D_OK;
      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
    #01: // SOH
    begin
      if (Length(FReceivedBuffer) < 16) then exit;

      if (CheckSum(FReceivedBuffer)) then
      begin
        FRequestCmd := System.Copy(FReceivedBuffer, 17, 2);
        if (FRequestCmd = 'NY') then
        begin
          if Assigned(FOnRCLNotification) then
          begin
           FOnRCLNotification(Self, System.Copy(FReceivedBuffer, 20, 2), System.Copy(FReceivedBuffer, 22, Length(FReceivedBuffer) - 25));
          end;
          FReceivedBuffer := '';
          exit;
        end
        else if (FRequestCmd = 'RD') then
        begin
          TransmitResponse('ER', Format('%.2x', [0]), 2);
          if Assigned(FOnRCLDisconnect) then
          begin
           FOnRCLDisconnect(Self);
          end;
          FReceivedBuffer := '';
          exit;
        end
        else if (FRequestCmd = 'RN') then
        begin
          if Assigned(FOnRCLAnnounce) then
          begin
           FOnRCLAnnounce(Self);
          end;
          FReceivedBuffer := '';
          exit;
        end;

//        FMessageID := PAnsiCharToDWord(@FReceivedBuffer[5]);
//        FSeqNumber := PAnsiCharToDWord(@FReceivedBuffer[9]);

        FReceivedData := System.Copy(FReceivedBuffer, 20, Length(FReceivedBuffer) - 23);
        FLastResult := D_OK;
      end
      else
        FLastResult := E_NAK_CHECKSUM;

      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
  else
    FLastResult := D_FALSE;
    SetEvent(FSyncMsgEvent);
    FReceivedBuffer := '';
  end;
end;

function TGrassValleyRCL.RCLConnect(var ASessionID: Word): Integer;
begin
  ASessionID := 0;

  FSessionID := 0;
  FMessageID := 0;//-1;
  FSeqNumber := 0;//-1;

  Result := TransmitCommand('RC', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'RA') then
    begin
      ASessionID := StrToIntDef('$' + Copy(FReceivedData, 1, 2), -1);
    end
    else
      Result := D_FALSE;
  end;

  FSessionID := ASessionID;
end;

function TGrassValleyRCL.RCLDisconnect: Integer;
begin
  Result := TransmitCommand('RD', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'ER') then
    begin
      Result := StrToIntDef('$' +Copy(FReceivedData, 1, 2), -1);
    end
    else
      Result := D_FALSE;
  end;
end;

function TGrassValleyRCL.AssignSource(ADstName: String; ASrcCnt: Word; ASrcNames: array of String): Integer;
begin
//  Result := TransmitCommand('AS', $0C, '', 0);
end;

function TGrassValleyRCL.TakebyLevelIndex(ADstEntry: TFullQualEntry; ASrcEntry: TFullQualEntry; ALevel: SmallInt; ATimeStamp: String = ''): Integer;
var
  Buffer: AnsiString;
begin
  Buffer := #9 + ATimeStamp + #9 + GetFullQualIndexString(ADstEntry) + #9 + GetFullQualIndexString(ASrcEntry);

  if (ALevel > 0) then
    Buffer := Buffer + #9 + Format('%.2x', [ALevel]);

  Result := TransmitCommand('TI', Buffer, Length(Buffer));
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'ER') then
    begin
      Result := StrToIntDef('$' + Copy(FReceivedData, 1, 2), 0);
    end
    else
      Result := D_FALSE;
  end;
end;

function TGrassValleyRCL.QueryDestinationStatusByIndex(ADstEntry: TFullQualEntry; var AProtect: Boolean; var AChopping: Boolean; var ASrcEntry: TFullQualEntry; var AChopEntry: TFullQualEntry): Integer;
var
  Buffer: AnsiString;
  SourceCount: Word;
begin
  FillChar(ASrcEntry, SizeOf(TFullQualEntry), #0);
  FillChar(AChopEntry, SizeOf(TFullQualEntry), #0);

  Buffer := #9 + GetFullQualIndexString(ADstEntry);// + #9;

  Result := TransmitCommand('QJ', Buffer, Length(Buffer));
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 22) and (FRequestCmd = 'JQ') then
    begin
      SourceCount := StrToIntDef('$' + Copy(FReceivedData, 9, 2), -1);

      AProtect  := (FReceivedData[12] = 'P');
      AChopping := (FReceivedData[14] = 'P');
      ASrcEntry.AreaIndex := StrToIntDef('$' + Copy(FReceivedData, 16, 2), -1);
      ASrcEntry.Index     := StrToIntDef('$' + Copy(FReceivedData, 19, 4), -1);

{      if (Length(FReceivedData) >= 30) then
      begin
        AChopEntry.AreaIndex := StrToIntDef('$' + Copy(FReceivedData, 24, 2), -1);
        AChopEntry.Index     := StrToIntDef('$' + Copy(FReceivedData, 27, 4), -1);
      end;}
    end;
  end;
end;

function TGrassValleyRCL.QueryDestinationStatusLevelByIndex(ADstEntry: TFullQualEntry; ALevel: SmallInt; var AProtect: Boolean; var AChopping: Boolean; var ASrcEntry: TFullQualEntry; var AChopEntry: TFullQualEntry): Integer;
var
  Buffer: AnsiString;
begin
  FillChar(ASrcEntry, SizeOf(TFullQualEntry), #0);
  FillChar(AChopEntry, SizeOf(TFullQualEntry), #0);

  Buffer := #9 + GetFullQualIndexString(ADstEntry) + #9 + Format('%.2d', [ALevel]);// + #9;

  Result := TransmitCommand('QI', Buffer, Length(Buffer));
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 22) and (FRequestCmd = 'IQ') then
    begin
      AProtect  := (FReceivedData[12] = 'P');
      AChopping := (FReceivedData[14] = 'P');
      ASrcEntry.AreaIndex := StrToIntDef('$' + Copy(FReceivedData, 16, 2), -1);
      ASrcEntry.Index     := StrToIntDef('$' + Copy(FReceivedData, 19, 4), -1);

      if (Length(FReceivedData) >= 30) then
      begin
        AChopEntry.AreaIndex := StrToIntDef('$' + Copy(FReceivedData, 24, 2), -1);
        AChopEntry.Index     := StrToIntDef('$' + Copy(FReceivedData, 27, 4), -1);
      end;
    end;
  end;
end;

function TGrassValleyRCL.QueryDateTime(var ADateTime: TDateTime): Integer;
var
  YY, MM, DD: Word;
  HH, MI, SS: Word;
begin
  Result := TransmitCommand('QT', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 14) and (FRequestCmd = 'ST') then
    begin
      YY := StrToIntDef(Copy(FReceivedData, 1, 4), 1);
      MM := StrToIntDef(Copy(FReceivedData, 5, 2), 1);
      DD := StrToIntDef(Copy(FReceivedData, 7, 2), 1);

      HH := StrToIntDef(Copy(FReceivedData, 9, 2), 0);
      MI := StrToIntDef(Copy(FReceivedData, 11, 2), 0);
      SS := StrToIntDef(Copy(FReceivedData, 13, 2), 0);

      ADateTime := EncodeDateTime(YY, MM, DD, HH, MI, SS, 0);
    end;
  end;
end;

{ TStatusThread }

constructor TStatusThread.Create(ALouth: TGrassValleyRCL);
begin
  FGrassValleyRCL := ALouth;
  FreeOnTerminate := False;
  inherited Create(True);
end;

destructor TStatusThread.Destroy;
begin
  inherited Destroy;
end;

procedure TStatusThread.DoStatus;
var
  R: Integer;
begin
  inherited;
//  if not FGrassValleyRCL.Connected then exit;

  with FGrassValleyRCL do
  begin
//    FCriticalSection.Enter;
    try
      FSaveConnected     := FConnected;

      if not (Connected) or (not Assigned(FAsyncThread) and not (FAsyncThread.Suspended)) then
      begin
        FConnected := False;
        exit;
      end;

    finally
//      FCriticalSection.Leave;
    end;
  end;
end;

procedure TStatusThread.DoControl;
begin
  inherited;
//  if not FGrassValleyRCL.Connected then exit;

  with FGrassValleyRCL do
  begin
//    FCriticalSection.Enter;
    try
    if Assigned(FOnConnectChanged) then
      if FSaveConnected <> FConnected then
        FOnConnectChanged(FGrassValleyRCL, FConnected);
    finally
//      FCriticalSection.Leave;
    end;
  end;
end;

procedure TStatusThread.Execute;
var
  R: Integer;
begin
  FExecuteEvent := CreateEvent(nil, True, True, nil);
  FCompleteEvent := CreateEvent(nil, True, True, nil);
  while not Terminated do
  begin
    if WaitForSingleObject(FExecuteEvent, INFINITE) = WAIT_OBJECT_0 then
    begin
      ResetEvent(FCompleteEvent);
      try
        DoStatus;
        DoControl;
//        Synchronize(DoControl);
      finally
        SetEvent(FCompleteEvent);
      end;
    end;
    Sleep(FGrassValleyRCL.FAutoStatusInterval);
  end;
  CloseHandle(FCompleteEvent);
  CloseHandle(FExecuteEvent);
end;

end.

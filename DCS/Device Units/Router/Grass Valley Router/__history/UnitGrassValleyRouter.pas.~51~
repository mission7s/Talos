unit UnitGrassValleyRouter;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, System.SyncObjs, Generics.Collections,
  UnitBaseSerial;

const
  GVR_SOH = $01;
  GVR_EOT = $04;

  // Nak Received, Error Bit
  GVR_NAK_BUFFER_SIZE_EXCEEDED = $71;
  GVR_NAK_BUFFER_NOT_AVAILABLE = $72;

  GVR_NAK_CHIP_LEVEL_ERROR     = $74;
  GVR_NAK_CHECKSUM_ERROR       = $75;
  GVR_NAK_TIME_OUT_ERROR       = $76;
  GVR_NAK_MISSING_SOH          = $77;
  GVR_NAK_MISSING_EOT          = $78;

  FULLQUAL_NAME_LEN = 20;

type
  TAudioSampleRate = (srUnKnown, sr32000, sr44100, sr48000);
  TAudioSampleMode = (smUnKnown, smStereo, smDual, smJoint, smMono);

  TVideoStandard = (vsNTSC, vsPAL);
  TVideoFormat = (vfMpeg420, vfMpeg422);
  TVideoSubFormat = (vfsGopIBP, vfsGopIB, vsfGopIOnly);

  TAudioQueMode = (aqOFF, aqPausedFrameAfter30, aqPausedFrameBefore30, aqPausedFrameAfter100, aqPausedFrameBefore100);

  TPortProtocol = (ppNotSelectedPort, ppLouth, ppOdetics);

  TPortStateStatus = record
    Idle: Boolean;
    Cue: Boolean;
    PlayRecord: Boolean;
    Still: Boolean;
    Jog: Boolean;
    Shuttle: Boolean;
    PortBusy: Boolean;
    CueDone: Boolean;
  end;

  TPortSystemStatus = record
    IDsAdded: Boolean;
    IDsDeleted: Boolean;
    IDsAddedToPeerArch: Boolean;
    NoTimeCode: Boolean;
  end;

  TPortErrorStatus = record
    SystemError: Boolean;
    IllegalValue: Boolean;
    InvalidPort: Boolean;
    WrongPortType: Boolean;
    PortLocked: Boolean;
    NotEnoughDiskSpace: Boolean;
    CmdWhileBusy: Boolean;
    NotSupported: Boolean;
    InvalidID: Boolean;
    IDNotFound: Boolean;
    IDAleadyExists: Boolean;
    IDStillRecording: Boolean;
    IDCuedOrPlaying: Boolean;
    XFerFailed: Boolean;
    XFerComplete: Boolean;
    IDDeleteProtected: Boolean;
    NotInCueState: Boolean;
    CueNotDone: Boolean;
    PortNotIdle: Boolean;
    PortActive: Boolean;
    PortIdle: Boolean;
    OperationFailed: Boolean;
    SystemReboot: Boolean;
  end;

  TPortSettings = record
    Off: Boolean;
    Composite: Boolean;
    SVideo: Boolean;
    YUV: Boolean;
    D1: Boolean;
    GPIEnabled: Boolean;
  end;

  TPortSupportedMediaFormats = record
    JPEG: Boolean;
    MPEG420: Boolean;
    MPEG422: Boolean;
  end;

  TPositionType = (ptCurrent, ptRemain);

  TDiskStatus = record
    DiskNearFull: Boolean;
  end;

  TSubSystemStatus = record
    PeerAvailable: Boolean;
    LocalArchiveAvailable: Boolean;
    SystemArchiveAvailable: Boolean;
    LocalArchiveFull: Boolean;
    SystemArchiveFull: Boolean;
  end;

  TListType = (ltAlphanumeric, ltFIFO);

  TIDRequest = record
    InDisk: Boolean;
    InMarkedForXFer: Boolean;
    InRemoteSystem: Boolean;
    DeleteProtected: Boolean;
    InArchive: Boolean;
    ArchivePending: Boolean;
    InXFer: Boolean;
    OperationPending: Boolean;
  end;

  TDecoderConfiguration = record
    LastFrame: Boolean;
    EOF: Boolean;
    IreSetup: Boolean;
  end;

  TVideoAttributes = record
    MediaStandard: TVideoStandard;
    MediaFormat: TVideoFormat;
    MediaSubFormat: TVideoSubFormat;
  end;

  TFullNameEntry = record
    AreaName: String;
    Name: String;
  end;

  TFullQualEntry = record
    case Integer of
      0: (
          AreaIndex: Int64;
          Index: Cardinal;
          );
      1: (
          AreaName: array [0..FULLQUAL_NAME_LEN] of Char;
          Name: array [0..FULLQUAL_NAME_LEN] of Char;
          );
  end;
  TTFullQualEntryList = TList<TFullQualEntry>;

  TOnConnectChanged = procedure(Sender: TComponent; AConnected: Boolean) of object;
  TOnTimeCodeChanged = procedure(Sender: TComponent; ATC: String) of object;
  TOnStateStatusChanged = procedure(Sender: TComponent; APortStateStatus: TPortStateStatus) of object;
//  TOnSystemStatusChanged = procedure(Sender: TComponent; APortSystemStatus: TPortSystemStatus) of object;

  TOnRCLNotification = procedure(Sender: TComponent; ASubType: String; AParameters: String) of object;

  TStatusThread = class;

  TGrassValleyRouter = class(TBaseSerial)
  private
    { Private declarations }
    FStatusThread: TStatusThread;

    FCaption: String;
    FDeviceID: Word;
    FCriticalSection: TCriticalSection;

    FSessionID: Word;
    FMessageID: Cardinal;
    FSeqNumber: Cardinal;
    FRequestCmd: AnsiString;


    FPortNumber: Integer;

    FPortStateStatus: TPortStateStatus;
//    FPortSystemStatus: TPortSystemStatus;
    FCurrentTC: String;
    FConnected: Boolean;
    FAutoStatus: Boolean;
    FAutoStatusInterval: Integer;

    FOnConnectChanged: TOnConnectChanged;
    FOnTimeCodeChanged: TOnTimeCodeChanged;
    FOnStateStatusChanged: TOnStateStatusChanged;
//    FOnSystemStatusChanged: TOnSystemStatusChanged;  }

    FOnRCLNotification: TOnRCLNotification;
    FOnRCLDisconnect: TNotifyEvent;
    FOnRCLAnnounce: TNotifyEvent;


//    procedure SetPortNumber(AValue: Integer);

    procedure SetCaption(AValue: String);
    procedure SetDeviceID(AValue: Word);
    procedure SetPortNumber(AValue: Integer);
    procedure SetAutoStatus(AValue: Boolean);
    procedure SetAutoStatusInterval(AValue: Integer);

    function GetFullQualIndexString(AFullQualEntry: TFullQualEntry): AnsiString;
    function GetFullQualNameString(AFullQualEntry: TFullQualEntry): AnsiString;

    function SendCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
  protected
    { Protected declarations }
    procedure DataEvent; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;

    function CheckSum(AValue: AnsiString): Boolean;
    function TransmitAck: Integer;
    function TransmitNack(ANakError: Byte): Integer;
    function TransmitResponse(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
    function TransmitStatus(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;

    function TransmitCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;

    function RCLConnect(var ASessionID: Word): Integer;
    function RCLDisconnect: Integer;

    function AssignSource(ADstName: String; ASrcCnt: Word; ASrcNames: array of String): Integer;
    function TakebyLevelIndex(ADstIndexIntry: TFullIndexEntry; ASrcIndexIntrys: TFullIndexEntry; ALevel: Integer; ATimeStamp: String = ''): Integer;




    property PortStateStatus: TPortStateStatus read FPortStateStatus;
//    property PortSystemStatus: TPortSystemStatus read FPortSystemStatus;
    property CurrentTC: String read FCurrentTC;
  published
    { Published declarations }
    property Caption: String read FCaption write SetCaption;
    property DeviceID: Word read FDeviceID write SetDeviceID;
    property PortNumber: Integer read FPortNumber write SetPortNumber;

    property AutoStatus: Boolean read FAutoStatus write SetAutoStatus;
    property AutoStatusInterval: Integer read FAutoStatusInterval write SetAutoStatusInterval;

    property OnConnectChanged: TOnConnectChanged read FOnConnectChanged write FOnConnectChanged;
    property OnTimeCodeChanged: TOnTimeCodeChanged read FOnTimeCodeChanged write FOnTimeCodeChanged;
    property OnStateStatusChanged: TOnStateStatusChanged read FOnStateStatusChanged write FOnStateStatusChanged;
//    property OnSystemStatusChanged: TOnSystemStatusChanged read FOnSystemStatusChanged write FOnSystemStatusChanged; }

    property OnRCLNotification: TOnRCLNotification read FOnRCLNotification write FOnRCLNotification;
    property OnRCLDisconnect: TNotifyEvent read FOnRCLDisconnect write FOnRCLDisconnect;
    property OnRCLAnnounce: TNotifyEvent read FOnRCLAnnounce write FOnRCLAnnounce;
  end;

  TStatusThread = class(TThread)
  private
    FLouth: TGrassValleyRouter;
    FExecuteEvent: THandle;
    FCompleteEvent: THandle;
    FSaveConnected: Boolean;
    FSaveStateStatus: TPortStateStatus;
    FSaveTC: String;

    procedure DoStatus;
    procedure DoControl;
  protected
    procedure Execute; override;
  public
    constructor Create(ALouth: TGrassValleyRouter);
    destructor Destroy; override;
  end;

implementation

{ TGrassValleyRouter }

constructor TGrassValleyRouter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FCriticalSection := TCriticalSection.Create;
  FLastResult := D_OK;
//  if SyncMode then OnDataEvent := DataEvent;

  FSessionID := 0;
  FMessageID := 0;
  FSeqNumber := 0;
  FRequestCmd := '';


  ZeroMemory(@FPortStateStatus, SizeOf(TPortStateStatus));
//  ZeroMemory(@FPortSystemStatus, SizeOf(TPortSystemStatus));
  FCurrentTC := IDLE_TIMECODE;

  FConnected  := False;
  FAutoStatus := False;
  FAutoStatusInterval := 30;
end;

destructor TGrassValleyRouter.Destroy;
begin
  if Assigned(FStatusThread) then
  begin
    FStatusThread.Terminate;
    FStatusThread.WaitFor;
    FreeAndNil(FStatusThread);
  end;

  if FCriticalSection <> nil then
  begin
    FCriticalSection.Free;
    FCriticalSection := nil;
  end;

  inherited Destroy;
end;

{procedure TGrassValleyRouter.SetPortNumber(AValue: Integer);
begin
  if not (Abs(AValue) in [0..127]) then
  begin
    MessageDlg('Device ID must between 0 and 127 or between -127 and -1', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FPortNumber then FPortNumber := AValue;
end; }

procedure TGrassValleyRouter.SetCaption(AValue: String);
begin
  if AValue <> FCaption then FCaption := AValue;
end;

procedure TGrassValleyRouter.SetDeviceID(AValue: Word);
begin
  if not (AValue in [0..255]) then
  begin
    MessageDlg('Device ID must between 0 and 255', mtError, [mbOk], 0);
    exit;
  end;

  if AValue <> FDeviceID then FDeviceID := AValue;
end;

procedure TGrassValleyRouter.SetPortNumber(AValue: Integer);
begin
//  if (csDesigning in ComponentState) or
//     (csReading in ComponentState) then
  begin
    if AValue <> FPortNumber then FPortNumber := AValue;
  end;
end;

procedure TGrassValleyRouter.SetAutoStatus(AValue: Boolean);
begin
  if FAutoStatus <> AValue then
  begin
    FAutoStatus := AValue;
    if FAutoStatus then
    begin
      FStatusThread := TStatusThread.Create(Self);
      FStatusThread.Resume;
    end
    else if Assigned(FStatusThread) then
    begin
      FStatusThread.Terminate;
      FStatusThread.WaitFor;
      FreeAndNil(FStatusThread);
    end;
  end;
end;

function TGrassValleyRouter.GetFullQualIndexString(AFullQualEntry: TFullQualEntry): AnsiString;
begin
  if (AFullQualEntry.AreaIndex >= 0) then
    Result := Format('%.2x:%.4x', [AFullQualEntry.AreaIndex, AFullQualEntry.Index])
  else
    Result := Format('%.4x', [AFullQualEntry.Index]);
end;

function TGrassValleyRouter.GetFullQualNameString(AFullQualEntry: TFullQualEntry): AnsiString;
begin
  if (Length(String(AFullQualEntry.AreaName)) >= 0) then
    Result := Format('%s:%s', [AFullQualEntry.AreaName, AFullQualEntry.Name])
  else
    Result := Format('%s', [AFullQualEntry.Name]);
end;

procedure TGrassValleyRouter.SetAutoStatusInterval(AValue: Integer);
begin
  if (FAutoStatusInterval <> AValue) then
    FAutoStatusInterval := AValue;
end;

function TGrassValleyRouter.CheckSum(AValue: AnsiString): Boolean;
var
  I, Len: Integer;
  CRC: Byte;
  CRCHexStr: AnsiString;
begin
  Result := False;

  Len := Length(AValue);
  CRC := 0;
  for I := 2 to Len - 3 do
    CRC := CRC + Ord(AValue[I]);

  CRC := (CRC mod 256);
  CRC := not (CRC) + 1;

  CRCHexStr := IntToHex(CRC, 2);

  Result := (AValue[Len - 2] = CRCHexStr[1]) and (AValue[Len - 1] = CRCHexStr[2]);
end;

function TGrassValleyRouter.SendCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  Buffer: PByte;
  SessionIDStr: AnsiString;
  MessageIDStr: AnsiString;
  SeqNumberStr: AnsiString;

  CheckSum: Byte;
  CheckSumStr: AnsiString;
  I: integer;
  ErrCnt: Integer;
begin
  Result := D_FALSE;

  Inc(FMessageID);
  Inc(FSeqNumber);

  Buffer := GetMemory(ADataSize + 22);
  try
    Buffer[0] := GVR_SOH;
    Buffer[1] := Ord('R');

    SessionIDStr := WordToAnsiString(FSessionID);
    Move(SessionIDStr, Buffer[2], 2);

    MessageIDStr := DWordToAnsiString(FMessageID);
    Move(MessageIDStr, Buffer[4], 4);

    SeqNumberStr := DWordToAnsiString(FSeqNumber);
    Move(MessageIDStr, Buffer[8], 4);

    Buffer[12] := $FF;
    Buffer[13] := $FF;
    Buffer[14] := $FF;
    Buffer[15] := $FF;

    for I := 1 to Length(ACMD) do
      Buffer[I + 15] := Ord(ACMD[I]);

    Buffer[I + 16 + Length(ACMD)] := $09;

    for I := 1 to ADataSize do
      Buffer[I + 16 + Length(ACMD)] := Ord(ADataBuf[I]);

    CheckSum := 0;
    for I := 0 to Length(ACMD) + ADataSize + 16 do
      CheckSum := CheckSum + Ord(Buffer[I]);

    CheckSum := (CheckSum mod 256);
    CheckSum := 0 - CheckSum;
    CheckSumStr := IntToHex(CheckSum, 2);

    Move(CheckSumStr, Buffer[Length(ACMD) + ADataSize + 16], 2);

    Buffer[Length(ACMD) + ADataSize + 17] := GVR_EOT;

    ErrCnt := 0;
    while ErrCnt < MAX_RETRY do
    begin
      if SendData(Pointer(Buffer), ADataSize + 5) = D_FALSE then
      begin
        Inc(ErrCnt);
        Continue;
      end
      else
      begin
        Result := D_OK;
        break;
      end;
    end;
  finally
    FreeMemory(Buffer);
  end;
end;

function TGrassValleyRouter.TransmitAck: Integer;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendString(AnsiChar($04));
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRouter.TransmitNack(ANakError: Byte): Integer;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendString(AnsiChar($05) + AnsiChar(ANakError));
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRouter.TransmitResponse(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  FCriticalSection.Enter;
  try
    Result := SendCommand(ACMD, ADataBuf, ADataSize);
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRouter.TransmitStatus(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  FReceivedBuffer := '';
  FReceivedData := '';

  FCriticalSection.Enter;
  try
    if SendCommand(ACMD, ADataBuf, ADataSize) = D_OK then
    begin
      ResetEvent(FSyncMsgEvent);
      R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
      case R of
        WAIT_OBJECT_0:
        begin
          Result := FLastResult;
        end;
      else
        Result := E_TIMEOUT;
      end;
    end;
  finally
    FCriticalSection.Leave;
  end;
end;

function TGrassValleyRouter.TransmitCommand(ACMD: AnsiString; ADataBuf: AnsiString; ADataSize: Integer): Integer;
var
  R: DWORD;
begin
  Result := D_FALSE;

  if Assigned(FStatusThread) then ResetEvent(FStatusThread.FExecuteEvent);
  try
    if Assigned(FStatusThread) then R := WaitForSingleObject(FStatusThread.FCompleteEvent, INFINITE);

    FReceivedBuffer := '';
    FReceivedData := '';

    FCriticalSection.Enter;
    try
      if (SendCommand(ACMD, ADataBuf, ADataSize) = D_OK) then
      begin
        ResetEvent(FSyncMsgEvent);
        R := WaitForSingleObject(FSyncMsgEvent, FTimeOut);
        case R of
          WAIT_OBJECT_0:
          begin
            Result := FLastResult;
          end;
        else
          Result := E_TIMEOUT;
        end;
      end;
    finally
      FCriticalSection.Leave;
    end;
  finally
    if Assigned(FStatusThread) then SetEvent(FStatusThread.FExecuteEvent);
  end;
end;

procedure TGrassValleyRouter.DataEvent;
var
  ByteCount: Integer;
begin
  inherited;
  if (Length(FReceivedBuffer) < 1) then exit;

  case FReceivedBuffer[1] of
    #15: // NAK
    begin
      if (Length(FReceivedBuffer) < 2) then exit;

      FLastResult := Ord(FReceivedBuffer[2]);
      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
    #06: // ACK
    begin
      FLastResult := D_OK;
      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
    #01: // SOH
    begin
      if (Length(FReceivedBuffer) < 16) then exit;

      if (CheckSum(FReceivedBuffer)) then
      begin
        FRequestCmd := System.Copy(FReceivedBuffer, 17, 2);
        if (FRequestCmd = 'NY') then
        begin
          if Assigned(FOnRCLNotification) then
          begin
           FOnRCLNotification(Self, System.Copy(FReceivedBuffer, 20, 2), System.Copy(FReceivedBuffer, 22, Length(FReceivedBuffer) - 3));
          end;
          FReceivedBuffer := '';
          exit;
        end
        else if (FRequestCmd = 'RD') then
        begin
          TransmitResponse('ER', '00', 2);
          if Assigned(FOnRCLDisconnect) then
          begin
           FOnRCLDisconnect(Self);
          end;
          FReceivedBuffer := '';
          exit;
        end
        else if (FRequestCmd = 'RN') then
        begin
          if Assigned(FOnRCLAnnounce) then
          begin
           FOnRCLAnnounce(Self);
          end;
          FReceivedBuffer := '';
          exit;
        end;


        FMessageID := PAnsiCharToDWord(@FReceivedBuffer[5]);
        FSeqNumber := PAnsiCharToDWord(@FReceivedBuffer[9]);

        FReceivedData := System.Copy(FReceivedBuffer, 20, Length(FReceivedBuffer) - 3);
        FLastResult := D_OK;
      end
      else
        FLastResult := E_NAK_CHECKSUM;

      SetEvent(FSyncMsgEvent);
      FReceivedBuffer := '';
    end;
  else
    FLastResult := D_FALSE;
    SetEvent(FSyncMsgEvent);
    FReceivedBuffer := '';
  end;
end;

function TGrassValleyRouter.RCLConnect(var ASessionID: Word): Integer;
begin
  ASessionID := 0;

  Result := TransmitCommand('RC', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'RA') then
    begin
      ASessionID := PAnsiCharToWord(@FReceivedData[1]);
    end
    else
      Result := D_FALSE;
  end;
end;

function TGrassValleyRouter.RCLDisconnect: Integer;
begin
  Result := TransmitCommand('RD', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'ER') then
    begin
      Result := PAnsiCharToWord(@FReceivedData[1]);
    end
    else
      Result := D_FALSE;
  end;
end;

function TGrassValleyRouter.AssignSource(ADstName: String; ASrcCnt: Word; ASrcNames: array of String): Integer;
begin
//  Result := TransmitCommand('AS', $0C, '', 0);
end;

function TGrassValleyRouter.TakebyLevelIndex(ATimeStamp: String; ADstIndexIntry: TFullIndexEntry; ASrcIndexIntrys: array of TFullIndexEntry): Integer;
var
  Buffer: AnsiString;
begin
  Buffer := ATimeStamp + #9 + GetFullIndexString;
  Result := TransmitCommand('RD', '', 0);
  if (Result = D_OK) then
  begin
    if (Length(FReceivedData) >= 2) and (FRequestCmd = 'ER') then
    begin
      Result := PAnsiCharToWord(@FReceivedData[1]);
    end
    else
      Result := D_FALSE;
  end;
end;

{ TStatusThread }

constructor TStatusThread.Create(ALouth: TGrassValleyRouter);
begin
  FLouth := ALouth;
  FreeOnTerminate := False;
  inherited Create(True);
end;

destructor TStatusThread.Destroy;
begin
  inherited Destroy;
end;

procedure TStatusThread.DoStatus;
var
  R: Integer;

  function GetStatus(var APortStateStatus: TPortStateStatus): Integer;
  var
    Buffer: AnsiString;
  begin
    Result := D_FALSE;
    ZeroMemory(@APortStateStatus, SizeOf(TPortStateStatus));

    with FLouth do
    begin
      Buffer := AnsiChar($01);
//      Result := TransmitStatus($30, $05, Buffer, Length(Buffer));

      if Result = D_OK then
      begin
        if Length(FReceivedData) < 4 then exit;
        APortStateStatus.Idle        := (Ord(FReceivedData[4]) and $01) > 0;
        APortStateStatus.Cue         := (Ord(FReceivedData[4]) and $02) > 0;
        APortStateStatus.PlayRecord  := (Ord(FReceivedData[4]) and $04) > 0;
        APortStateStatus.Still       := (Ord(FReceivedData[4]) and $08) > 0;
        APortStateStatus.Jog         := (Ord(FReceivedData[4]) and $10) > 0;
        APortStateStatus.Shuttle     := (Ord(FReceivedData[4]) and $20) > 0;
        APortStateStatus.PortBusy    := (Ord(FReceivedData[4]) and $40) > 0;
        APortStateStatus.CueDone     := (Ord(FReceivedData[4]) and $80) > 0;
      end;
    end;
  end;

  function GetTC(var ATC: String): Integer;
  var
    Buffer: AnsiString;
    Hour, Minute, Second, Frame: Word;
  begin
    Result := D_FALSE;
    ATC := IDLE_TIMECODE;

    with FLouth do
    begin
      Buffer := AnsiChar($01);
//      Result := TransmitStatus($30, $06, Buffer, Length(Buffer));
      if Result = D_OK then
      begin
        if Length(FReceivedData) < 7 then exit;
        Frame    := BCDToInt(Ord(FReceivedData[4]));
        Second   := BCDToInt(Ord(FReceivedData[5]));
        Minute   := BCDToInt(Ord(FReceivedData[6]));
        Hour     := BCDToInt(Ord(FReceivedData[7]));

        ATC      := EncodeTimeCode(Hour, Minute, Second, Frame);
      end;
    end;
  end;

begin
  inherited;
//  if not FLouth.Connected then exit;

  with FLouth do
  begin
//    FCriticalSection.Enter;
    try
      FSaveConnected     := FConnected;
      FSaveStateStatus   := FPortStateStatus;
      FSaveTC            := FCurrentTC;

      if not (Connected) or (not Assigned(FAsyncThread) and not (FAsyncThread.Suspended)) then
      begin
        FConnected := False;
        exit;
      end;

      R := GetStatus(FPortStateStatus);
      if R = D_OK then FConnected := True
      else FConnected := False;

      Sleep(FAutoStatusInterval);
      if FConnected then
      begin
        R := GetTC(FCurrentTC);
        Sleep(FAutoStatusInterval);
      end
      else FCurrentTC := IDLE_TIMECODE;
    finally
//      FCriticalSection.Leave;
    end;
  end;
end;

procedure TStatusThread.DoControl;
begin
  inherited;
//  if not FLouth.Connected then exit;

  with FLouth do
  begin
//    FCriticalSection.Enter;
    try
    if Assigned(FOnConnectChanged) then
      if FSaveConnected <> FConnected then
        FOnConnectChanged(FLouth, FConnected);

    if Assigned(FOnStateStatusChanged) then
      if ((FSaveConnected <> FConnected) and (FConnected)) or
         (FSaveStateStatus.Idle <> FPortStateStatus.Idle) or
         (FSaveStateStatus.Cue <> FPortStateStatus.Cue) or
         (FSaveStateStatus.PlayRecord <> FPortStateStatus.PlayRecord) or
         (FSaveStateStatus.Still <> FPortStateStatus.Still) or
         (FSaveStateStatus.Jog <> FPortStateStatus.Jog) or
         (FSaveStateStatus.Shuttle <> FPortStateStatus.Shuttle) or
         (FSaveStateStatus.PortBusy <> FPortStateStatus.PortBusy) or
         (FSaveStateStatus.CueDone <> FPortStateStatus.CueDone) then
        FOnStateStatusChanged(FLouth, FPortStateStatus);

    if Assigned(FOnTimeCodeChanged) then
      if ((FSaveConnected <> FConnected) and (FConnected)) or
         (FSaveTC <> FCurrentTC) then
        FOnTimeCodeChanged(FLouth, FCurrentTC);
    finally
//      FCriticalSection.Leave;
    end;
  end;
end;

procedure TStatusThread.Execute;
var
  R: Integer;
begin
  FExecuteEvent := CreateEvent(nil, True, True, nil);
  FCompleteEvent := CreateEvent(nil, True, True, nil);
  while not Terminated do
  begin
    if WaitForSingleObject(FExecuteEvent, INFINITE) = WAIT_OBJECT_0 then
    begin
      ResetEvent(FCompleteEvent);
      try
        DoStatus;
        DoControl;
//        Synchronize(DoControl);
      finally
        SetEvent(FCompleteEvent);
      end;
    end;
    Sleep(FLouth.FAutoStatusInterval);
  end;
  CloseHandle(FCompleteEvent);
  CloseHandle(FExecuteEvent);
end;

end.
